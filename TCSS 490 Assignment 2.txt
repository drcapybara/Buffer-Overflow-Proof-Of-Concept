The purpose of this assignment is to demonstrate the danger of the Buffer overflow
attack, arguably one of the most common vectors of attacks leveraged against
the C programming language.

The buffer overflow attack is demonstrated here in the following environment:

Operating system: Debian 10
IDE: Visual Studio Code
Compilers used: GCC and CLANG

In order for the exploit to work, there are a few modifications that need to be made
to the system environment. There are built in protections to the operating system
and to the compilers used that work to help prevent the buffer overflow attack.

First, Address Space Layout Randomization (ASLR) must be disabled. This is a mitigation
to the attack that works by choosing random memory addresses for the running program
in order to make it more difficult to determine the address of certain elements within
the stack frame.

The following code disables ASLR on a linux system:

  sudo bash -c 'echo 0 > /proc/sys/kernel/randomize_va_space'

It is important to note that this change does not persist past a reboot of
the machine.

The next step applies to the GCC compiler. The following flags are added as arguments
to GCC and work to disable stack protections:

-m32 : this flag tells GCC to compile the program in 32-bit mode. This makes it
easier to count the number of bytes needed to overwrite the return address of the
function in question.

-fno-stack-protector : this flag turns off protection against stack smashing.
This setting is turned off by default in GCC on many systems because it can cause
conflicts with the C standard library.
